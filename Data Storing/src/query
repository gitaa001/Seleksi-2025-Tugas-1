-- Tabel trainee
CREATE TABLE trainee (
    id_trainee SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    company TEXT,
    age INTEGER NOT NULL,
    korean_name TEXT,
    japanese_name TEXT,
    first_grade TEXT,
    last_grade TEXT,
    first_rank INTEGER,
    final_rank TEXT
);

-- Tabel episodes
CREATE TABLE episodes (
    episode INTEGER PRIMARY KEY,
    broadcast_date TEXT,
    nationwide_rate REAL,
    seoul_rate REAL
);

-- Tabel trainee_episode_rank
CREATE TABLE trainee_episode_rank (
    episode INTEGER NOT NULL,
    id_trainee INTEGER NOT NULL,
    rank TEXT,
    PRIMARY KEY (episode, id_trainee),
    FOREIGN KEY (episode) REFERENCES episodes(episode) ON DELETE CASCADE,
    FOREIGN KEY (id_trainee) REFERENCES trainee(id_trainee) ON DELETE CASCADE
);

-- Tabel singles
CREATE TABLE singles (
    id_single SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    lyrics_writer TEXT,
    music_producer TEXT,
    arrangement TEXT,
    duration TEXT
);

-- Table single_chart
CREATE TABLE single_chart (
    id_single SERIAL PRIMARY KEY,
    year INTEGER NOT NULL,
    peak_kor INTEGER,
    kor_hot_100 INTEGER,
    id_album INTEGER,
    FOREIGN KEY (id_single) REFERENCES singles(id_single),
    FOREIGN KEY (id_album) REFERENCES album(id_album) ON DELETE SET NULL
);

-- Tabel album
CREATE TABLE album (
    id_album SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    release_date TEXT,
    label TEXT,
    formats TEXT,
    jpn_hot INTEGER,
    jpn_digital INTEGER,
    us_world INTEGER,
    sales INTEGER
);

-- Tabel evaluation
CREATE TABLE evaluation (
    evaluation_id SERIAL PRIMARY KEY,
    evaluation_type TEXT NOT NULL
);

-- Tabel individual_evaluation
CREATE TABLE individual_evaluation (
    id_perform SERIAL PRIMARY KEY,
    id_trainee INTEGER NOT NULL,
    company TEXT,
    grade TEXT,
    song TEXT,
    FOREIGN KEY (id_trainee) REFERENCES trainee(id_trainee) ON DELETE CASCADE
);

-- Tabel group_battle_evaluation
CREATE TABLE group_battle_evaluation (
    id_perform SERIAL PRIMARY KEY,
    id_trainee INTEGER NOT NULL,
    original_artist TEXT,
    song TEXT,
    team_name TEXT,
    trainee_position TEXT,
    trainee_votes INTEGER,
    trainee_bonus INTEGER,
    FOREIGN KEY (id_trainee) REFERENCES trainee(id_trainee) ON DELETE CASCADE
);


-- Tabel position_evaluation
CREATE TABLE position_evaluation (
    id_perform SERIAL PRIMARY KEY,
    id_trainee INTEGER NOT NULL,
    category TEXT,
    song TEXT,
    original_artist TEXT,
    trainee_votes FLOAT,
    rank_in_team INTEGER,
    trainee_bonus INTEGER,
    FOREIGN KEY (id_trainee) REFERENCES trainee(id_trainee) ON DELETE CASCADE
);

-- Tabel concept_evaluation
CREATE TABLE concept_evaluation (
    id_perform SERIAL PRIMARY KEY,
    id_trainee INTEGER NOT NULL,
    concept TEXT,
    id_single INTEGER,
    trainee_position TEXT,
    trainee_votes INTEGER,
    trainee_rank INTEGER,
    bonus INTEGER,
    FOREIGN KEY (id_trainee) REFERENCES trainee(id_trainee) ON DELETE CASCADE,
    FOREIGN KEY (id_single) REFERENCES singles(id_single) ON DELETE CASCADE
);


-- Tabel debut_evaluation
CREATE TABLE debut_evaluation (
    id_perform SERIAL PRIMARY KEY,
    id_single TEXT,
    trainee_position TEXT,
    id_trainee INTEGER,
    FOREIGN KEY (id_trainee) REFERENCES trainee(id_trainee) ON DELETE CASCADE
);

-- Tabel trainee_evaluation (relasi M2M)
CREATE TABLE trainee_evaluation (
    id_trainee INTEGER NOT NULL,
    evaluation_id INTEGER NOT NULL,
    FOREIGN KEY (id_trainee) REFERENCES trainee(id_trainee) ON DELETE CASCADE,
    FOREIGN KEY (evaluation_id) REFERENCES evaluation(evaluation_id) ON DELETE CASCADE,
    UNIQUE(id_trainee, evaluation_id)
);

---------------------- TRIGGER & FUNCTION ---------------------

-- Function & trigger: hapus trainee_episode_rank jika trainee dihapus
CREATE OR REPLACE FUNCTION delete_trainee_rank_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM trainee_episode_rank WHERE id_trainee = OLD.id_trainee;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_trainee_rank
AFTER DELETE ON trainee
FOR EACH ROW EXECUTE FUNCTION delete_trainee_rank_func();

-- Function & trigger: hapus trainee_episode_rank jika episode dihapus
CREATE OR REPLACE FUNCTION delete_episode_rank_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM trainee_episode_rank WHERE episode = OLD.episode;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_episode_rank
AFTER DELETE ON episodes
FOR EACH ROW EXECUTE FUNCTION delete_episode_rank_func();

-- Function & trigger: hapus group_battle_performance jika group_battle_evaluation dihapus
CREATE OR REPLACE FUNCTION delete_group_battle_perf_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM group_battle_performance WHERE id_perform = OLD.id_perform;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_group_battle_perf
AFTER DELETE ON group_battle_evaluation
FOR EACH ROW EXECUTE FUNCTION delete_group_battle_perf_func();

-- Function & trigger: hapus position_performance jika position_evaluation dihapus
CREATE OR REPLACE FUNCTION delete_position_perf_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM position_performance WHERE id_perform = OLD.id_perform;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_position_perf
AFTER DELETE ON position_evaluation
FOR EACH ROW EXECUTE FUNCTION delete_position_perf_func();

-- Function & trigger: hapus concept_performance jika concept_evaluation dihapus
CREATE OR REPLACE FUNCTION delete_concept_perf_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM concept_performance WHERE id_perform = OLD.id_perform;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_concept_perf
AFTER DELETE ON concept_evaluation
FOR EACH ROW EXECUTE FUNCTION delete_concept_perf_func();

-- Function & trigger: hapus semua tabel evaluation jika evaluation dihapus
CREATE OR REPLACE FUNCTION delete_evaluation_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM individual_evaluation WHERE evaluation_id = OLD.evaluation_id;
    DELETE FROM group_battle_evaluation WHERE evaluation_id = OLD.evaluation_id;
    DELETE FROM position_evaluation WHERE evaluation_id = OLD.evaluation_id;
    DELETE FROM concept_evaluation WHERE evaluation_id = OLD.evaluation_id;
    DELETE FROM debut_evaluation WHERE evaluation_id = OLD.evaluation_id;
    DELETE FROM trainee_evaluation WHERE evaluation_id = OLD.evaluation_id;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_evaluation
AFTER DELETE ON evaluation
FOR EACH ROW EXECUTE FUNCTION delete_evaluation_func();

-- Function & trigger: hapus trainee_evaluation jika trainee dihapus
CREATE OR REPLACE FUNCTION delete_trainee_eval_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM trainee_evaluation WHERE trainee_id = OLD.id_trainee;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_trainee_eval
AFTER DELETE ON trainee
FOR EACH ROW EXECUTE FUNCTION delete_trainee_eval_func();

-- Function & trigger: hapus trainee_evaluation jika evaluation dihapus
CREATE OR REPLACE FUNCTION delete_eval_trainee_func()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM trainee_evaluation WHERE evaluation_id = OLD.evaluation_id;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_eval_trainee
AFTER DELETE ON evaluation
FOR EACH ROW EXECUTE FUNCTION delete_eval_trainee_func();